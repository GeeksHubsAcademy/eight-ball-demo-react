{"version":3,"sources":["components/input.jsx","models/answers.js","services/magicService.js","components/output.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Input","state","question","submit","ev","preventDefault","_this","props","setState","_this2","this","react_default","a","createElement","onSubmit","className","type","placeholder","value","onChange","event","target","React","Component","answers","text","MagicService","randomIndex","Math","floor","random","length","answer","Output","history","map","record","i","concat","key","App","historyList","onNewQuestion","magicBallService","Object","toConsumableArray","input_Input","output_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAEqBA,0NACnBC,MAAQ,CACNC,SAAU,MAEZC,OAAS,SAAAC,GACPA,EAAGC,iBACCC,EAAKL,MAAMC,UAAyC,oBAAtBI,EAAKC,MAAMJ,SACzCG,EAAKC,MAAMJ,OAAOG,EAAKL,MAAMC,UAC7BI,EAAKE,SAAS,CAAEN,SAAU,+EAGvB,IAAAO,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,KAAKP,OAAQY,UAAU,SACrCJ,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLC,YAAY,4BACZC,MAAOR,KAAKT,MAAMC,SAClBiB,SAAU,SAAAC,GAAK,OAAIX,EAAKD,SAAS,CAAEN,SAAUkB,EAAMC,OAAOH,WAE5DP,EAAAC,EAAAC,cAAA,UAAQG,KAAK,UAAb,iBApB2BM,IAAMC,YCqB1BC,EAvBC,CACZ,CAAER,KAAM,aAAcS,KAAM,2BAC5B,CAAET,KAAM,aAAcS,KAAM,aAC5B,CAAET,KAAM,aAAcS,KAAM,2BAC5B,CAAET,KAAM,aAAcS,KAAM,iBAC5B,CAAET,KAAM,aAAcS,KAAM,sBAC5B,CAAET,KAAM,aAAcS,KAAM,2BAC5B,CAAET,KAAM,aAAcS,KAAM,YAC5B,CAAET,KAAM,aAAcS,KAAM,SAC5B,CAAET,KAAM,aAAcS,KAAM,2BAC5B,CAAET,KAAM,aAAcS,KAAM,yBAC5B,CAAET,KAAM,QAASS,KAAM,uCACvB,CAAET,KAAM,QAASS,KAAM,4BACvB,CAAET,KAAM,QAASS,KAAM,yCACvB,CAAET,KAAM,QAASS,KAAM,6BACvB,CAAET,KAAM,QAASS,KAAM,uCACvB,CAAET,KAAM,WAAYS,KAAM,uBAC1B,CAAET,KAAM,WAAYS,KAAM,sBAC1B,CAAET,KAAM,WAAYS,KAAM,+BAC1B,CAAET,KAAM,WAAYS,KAAM,kCAC1B,CAAET,KAAM,WAAYS,KAAM,eCTfC,EATM,SAAAxB,GACjB,IAAMyB,EAAcC,KAAKC,MAAOD,KAAKE,SAAWN,EAAQO,QACxD,MAAO,CACH7B,WACA8B,OAAQR,EAASG,KCJJM,0LAEjB,OACEtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACZL,KAAKH,MAAM2B,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACtB1B,EAAAC,EAAAC,cAAA,OACEE,WAAkB,IAANsB,EAAU,OAAS,IAApB,WAAAC,OAAqCF,EAAOJ,OAAOhB,MAC9DuB,IAAKF,GAEL1B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAf,QAA6BqB,EAAOlC,SAApC,MACAS,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAUqB,EAAOJ,OAAOP,iBAVfH,IAAMC,YCqB3BiB,6MAjBbvC,MAAQ,CACNwC,YAAa,MAEfC,cAAgB,SAAAxC,GACd,IAAM8B,EAASW,EAAiBzC,GAChCI,EAAKE,SAAS,CAAEiC,YAAW,CAAGT,GAAHM,OAAAM,OAAAC,EAAA,EAAAD,CAActC,EAAKL,MAAMwC,yFAGpD,OACE9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACiC,EAAD,CAAO3C,OAAQO,KAAKgC,gBACpB/B,EAAAC,EAAAC,cAACkC,EAAD,CAAQb,QAASxB,KAAKT,MAAMwC,sBAZlBlB,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3c178cd.chunk.js","sourcesContent":["import React from \"react\";\nimport './input.scss';\nexport default class Input extends React.Component {\n  state = {\n    question: \"\"\n  };\n  submit = ev => {\n    ev.preventDefault();\n    if (this.state.question && typeof this.props.submit === \"function\") {\n        this.props.submit(this.state.question);\n        this.setState({ question: '' })\n    }\n  };\n  render() {\n    return (\n      <form onSubmit={this.submit} className=\"Input\">\n        <input\n          type=\"text\"\n          placeholder=\"¿Qué quieres saber?\"\n          value={this.state.question}\n          onChange={event => this.setState({ question: event.target.value })}\n        />\n        <button type=\"submit\">Dime!</button>\n      </form>\n    );\n  }\n}\n","const answers = [\n    { type: 'afirmative', text: 'En mi opinión, sí' },\n    { type: 'afirmative', text: 'Es cierto' },\n    { type: 'afirmative', text: 'Es decididamente así' },\n    { type: 'afirmative', text: 'Probablemente' },\n    { type: 'afirmative', text: 'Buen pronóstico' },\n    { type: 'afirmative', text: 'Todo apunta a que sí' },\n    { type: 'afirmative', text: 'Sin duda' },\n    { type: 'afirmative', text: 'Sí' },\n    { type: 'afirmative', text: 'Sí - definitivamente' },\n    { type: 'afirmative', text: 'Debes confiar en ello' },\n    { type: 'doubt', text: 'Respuesta vaga, vuelve a intentarlo' },\n    { type: 'doubt', text: 'Pregunta en otro momento' },\n    { type: 'doubt', text: 'Será mejor que no te lo diga ahora' },\n    { type: 'doubt', text: 'No puedo predecirlo ahora' },\n    { type: 'doubt', text: 'Concéntrate y vuelve a preguntar' },\n    { type: 'negative', text: 'No cuentes con ello' },\n    { type: 'negative', text: 'Mi respuesta es no' },\n    { type: 'negative', text: 'Mis fuentes me dicen que no' },\n    { type: 'negative', text: 'Las perspectivas no son buenas' },\n    { type: 'negative', text: 'Muy dudoso' },\n]\n\nexport default answers;","import answers from '../models/answers';\n\nconst MagicService = question => {\n    const randomIndex = Math.floor( Math.random() * answers.length );\n    return {\n        question,\n        answer: answers[ randomIndex ]\n    }\n\n}\n\nexport default MagicService\n","import React from \"react\";\nimport \"./output.scss\";\nexport default class Output extends React.Component {\n  render() {\n    return (\n      <div className=\"Output\">\n        {this.props.history.map((record, i) => (\n          <div\n            className={(i === 0 ? \"last\" : \"\" )+ ` record ${record.answer.type}`}\n            key={i}\n          >\n            <div className=\"question\"> ¿{record.question}? </div>\n            <div className=\"answer\">{record.answer.text}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport magicBallService from \"./services/magicService\";\nimport Output from './components/output';\nclass App extends Component {\n  state = {\n    historyList: []\n  };\n  onNewQuestion = question => {\n    const answer = magicBallService(question);\n    this.setState({ historyList: [answer, ...this.state.historyList] });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Input submit={this.onNewQuestion} />\n        <Output history={this.state.historyList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}